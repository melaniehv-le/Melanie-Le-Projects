import sys
from PyQt5.QtGui import QPainter, QColor, QFont, QPen, QBrush
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget, QApplication, QPushButton
import random

CELL_COUNT = 4
CELL_SIZE = 70
GRID_ORIGINX = 110
GRID_ORIGINY = 110
W_WIDTH = 500
W_HEIGHT = 500

class Fifteen(QWidget):

  def __init__(self):
    super().__init__()
    self.setWindowTitle('Fifteen')
    self.setGeometry(300, 300, W_WIDTH,W_HEIGHT)
    self.__board = [[-1,-1,-1,-1],[-1,-1,-1,-1],[-1,-1,-1,-1],[-1,-1,-1,-1]]
    self.__values = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ' ']
    self.__winner = False
    self.__moves = 0
    self.__inversions = 0
    solve = False

    self.show()

    while solve is not True:
        self.__values = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ' ']
        for row in range(CELL_COUNT):
            for col in range(CELL_COUNT):
                value = random.choice(self.__values)
                self.__board[row][col] = value
                self.__values.remove(value)
        solve = self.solvable()



  def solvable(self):
      board1 = []
      self.__inversions = 0
      for row in range(CELL_COUNT):
          for col in range(CELL_COUNT):
              number = self.__board[row][col]
              if type(number) == int:
                  board1.append(self.__board[row][col])
      for row in range(len(board1)):
          for col in range(row + 1, len(board1)):
              if (board1[row] > board1[col]):
                  self.__inversions += 1
      solvable = False
      for row in range(1,4,2):
          for col in range(len(self.__board[row])):
              if self.__board[row][col] == ' ':
                  if self.__inversions % 2 == 0:
                      solvable = True
                      #print(self.__inversions)
      if solvable == False:
          for row in range(0,3,2):
              for col in range(len(self.__board[row])):
                  if self.__board[row][col] == ' ':
                      if self.__inversions % 2 == 1:
                          solvable = True
                      #print(self.__inversions)
      return solvable

  def paintEvent(self, event):
    qp = QPainter()
    qp.begin(self)
    for row in range(CELL_COUNT):
        for col in range(CELL_COUNT):
            qp.setPen(QPen(Qt.black, 1))
            qp.drawRect((GRID_ORIGINX+col*CELL_SIZE),(GRID_ORIGINY+row*CELL_SIZE), CELL_SIZE, CELL_SIZE)
            qp.drawText((GRID_ORIGINX+col*CELL_SIZE) + 30,(GRID_ORIGINY+row*CELL_SIZE)+ 40, str(self.__board[row][col]))
    qp.drawText(185,450, "Number of Moves: " + str(self.__moves))
    bluePen = QPen(QBrush(Qt.blue), 2)
    qp.setPen(bluePen)
    qp.drawText(20,40, "Restart Game")
    qp.drawRect(10, 20, 100, 30)

    if self.__inversions == 0 and self.__board[3][3] == ' ':
        self.__winner = True
        pen = QPen(QBrush(Qt.red), 6)
        qp.setPen(pen)
        qp.drawText(150, 80, "Congratulations! You have won!")
        pen2 = QPen(QBrush(Qt.green, Qt.Dense1Pattern), 6)
        qp.setPen(pen2)
        qp.drawRect(110,110,285,285)
        pen3 = QPen(QBrush(Qt.red, Qt.Dense1Pattern), 6)
        qp.setPen(pen3)
        qp.drawRect(103,103,295,295)
        for row in range(CELL_COUNT):
            for col in range(CELL_COUNT):
                qp.setPen(QPen(Qt.red, 2))
                qp.drawRect((GRID_ORIGINX+col*CELL_SIZE),(GRID_ORIGINY+row*CELL_SIZE), CELL_SIZE, CELL_SIZE)
                qp.drawText((GRID_ORIGINX+col*CELL_SIZE) + 30,(GRID_ORIGINY+row*CELL_SIZE)+ 40, str(self.__board[row][col]))

    qp.end()

  def mousePressEvent(self, event):
      self.x = event.x()
      self.y = event.y()
      if self.__inversions == 0 and self.__board[3][3] == ' ' and self.x not in range(10,110) and self.y not in range(20,50):
          self.__winner = True
          return
      col = (self.x - GRID_ORIGINX) // CELL_SIZE
      row = (self.y - GRID_ORIGINY) // CELL_SIZE

      in_grid = False
      if self.x in range(W_WIDTH - GRID_ORIGINX, 500 - GRID_ORIGINX):
          if self.y in range(W_HEIGHT - GRID_ORIGINY, 500 - GRID_ORIGINY):
              in_grid = True
      if self.x in range(10,110):
          if self.y in range(20,50):
              self.__moves = 0
              self.__values = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ' ']
              for row in range(CELL_COUNT):
                  for col in range(CELL_COUNT):
                      value = random.choice(self.__values)
                      self.__board[row][col] = value
                      self.__values.remove(value)
                      self.solvable()


      if 0 <= row < 4 and 0 <= col < 4:
          for r in range(len(self.__board)):
              for c in range(len(self.__board[r])):
                  if self.__board[r][c] == ' ':
                      spacer = r
                      spacec = c
          if in_grid == True:
              col = ((self.x - GRID_ORIGINX) // CELL_SIZE)
              row = ((self.y - GRID_ORIGINY) // CELL_SIZE)
          if spacec == col:
              if row - 1 == spacer:
                  self.__board[row - 1][col] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 1
              if row - 2 == spacer:
                  self.__board[row - 2][col] = self.__board[row - 1][col]
                  self.__board[row - 1][col] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 2
              if row - 3 == spacer:
                  self.__board[row - 3][col] = self.__board[row - 2][col]
                  self.__board[row - 2][col] = self.__board[row - 1][col]
                  self.__board[row - 1][col] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 3
              if row + 1 == spacer:
                  self.__board[row + 1][col] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 1
              if row + 2 == spacer:
                  self.__board[row + 2][col] = self.__board[row + 1][col]
                  self.__board[row + 1][col] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 2
              if row + 3 == spacer:
                  self.__board[row + 3][col] = self.__board[row + 2][col]
                  self.__board[row + 2][col] = self.__board[row + 1][col]
                  self.__board[row + 1][col] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 3
              self.solvable()
              #if self.__inversions == 0 and self.__board[3][3] == ' ':
                  #self.__winner = True

          if spacer == row:
              if col - 1 == spacec:
                  self.__board[row][col - 1] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 1
              if col - 2 == spacec:
                  self.__board[row][col - 2] = self.__board[row][col - 1]
                  self.__board[row][col - 1] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 2
              if col - 3 == spacec:
                  self.__board[row][col - 3] = self.__board[row][col - 2]
                  self.__board[row][col - 2] = self.__board[row][col - 1]
                  self.__board[row][col - 1] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 3
              if col + 1 == spacec:
                  self.__board[row][col + 1] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 1
              if col + 2 == spacec:
                  self.__board[row][col + 2] = self.__board[row][col + 1]
                  self.__board[row][col + 1] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 2
              if col + 3 == spacec:
                  self.__board[row][col + 3] = self.__board[row][col + 2]
                  self.__board[row][col + 2] = self.__board[row][col + 1]
                  self.__board[row][col + 1] = self.__board[row][col]
                  self.__board[row][col]= ' '
                  self.__moves += 3
              self.solvable()

              self.update()

          else:
              self.update()

              return


if __name__ == '__main__':
  app = QApplication(sys.argv)
  ex = Fifteen()
  sys.exit(app.exec_())
